using AXmlPoConverter.Po.Parsers;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace AXmlPoConverter.Po
{
	[DebuggerDisplay("{Language}")]
	public class PoResource : List<PoString>
	{
		public string Language { get; set; }
		public static PoResource ReadPoFile(string path)
		{
			string language = Path.GetFileNameWithoutExtension(path);
			ParserContext context = new ParserContext(new PoResource() { Language = language });

			IEnumerable<Type> parserTypes = Assembly.GetExecutingAssembly().GetTypes().Where(t => t.IsClass && t.Namespace == "AXmlPoConverter.Po.Parsers" && !t.IsAbstract);

			using (StreamReader reader = new StreamReader(path))
			{
				while (!reader.EndOfStream)
				{
					var line = reader.ReadLine();

					if (!string.IsNullOrEmpty(line) && !string.IsNullOrEmpty(line.Trim()))
					{
						line = line.Trim().Replace(@"\n", "");

						foreach (Type parserType in parserTypes)
						{
							ConstructorInfo cInfo = parserType.GetConstructor(new Type[] { typeof(string) });

							ParserBase parser = cInfo.Invoke(new object[] { line }) as ParserBase;

							if (parser.Parse(context))
							{
								break;
							}
						}
					} else
					{
						context.NextString();
					}
				}
			}

			context.FinalizeResource();

			return context.PoResource;
		}

		public string GetFileName()
		{
			return $"{this.Language}.po";
		}
		public void Save(string path)
		{
			string dirName = Path.GetDirectoryName(path);
			if (!Directory.Exists(dirName))
			{
				Directory.CreateDirectory(dirName);
			}
			using (StreamWriter sWriter = new StreamWriter(path))
			{
				// write header
				sWriter.WriteLine(@"# Generated By AXmlPoConverter");
				sWriter.WriteLine(@"msgid """"");
				sWriter.WriteLine(@"msgstr """"");
				sWriter.WriteLine(@"""Content-Type: text/plain; charset=UTF-8\n""");
				sWriter.WriteLine(@"""Content-Transfer-Encoding: 8bit""");
				sWriter.WriteLine(@"""Plural-Forms: nplurals=2; plural=(n != 1);\n""");
				sWriter.WriteLine($@"""Language: {this.Language}\n""");

				// write strings
				foreach (PoString pString in this)
				{
					sWriter.WriteLine();
					foreach (string comment in pString.Comments)
					{
						sWriter.WriteLine($@"#. {Normalize(comment)}");
					}

					foreach (string link in pString.Links)
					{
						sWriter.WriteLine($@"#: {Normalize(link)}");
					}

					string[] idLines = pString.Id.Split(new string[] { "\n" }, StringSplitOptions.None);

					if (idLines.Length > 1 || pString.Id.Length >= 80)
					{
						sWriter.WriteLine($@"msgid """"");
						foreach (string idLine in idLines)
						{
							if (idLine.Length >= 80)
							{
								string remLine = idLine;

								while (remLine.Length > 0)
								{
									string subLine = remLine.Substring(0, Math.Min(79, remLine.Length));
									remLine = remLine.Replace(subLine, "");

									string nChar = "";

									if (remLine.Length == 0)
									{
										nChar = "\\n";
									}

									sWriter.WriteLine($@"""{Normalize(subLine)}{nChar}""");
								}
							}
							else
							{
								sWriter.WriteLine($@"""{Normalize(idLine)}\n""");
							}
						}
					}
					else
					{
						sWriter.WriteLine($@"msgid ""{Normalize(pString.Id)}""");
					}

					string[] strLines = new string[] { "" };
					
					if (!string.IsNullOrEmpty(pString.Value))
						strLines = pString.Value.Split(new string[] { "\n" }, StringSplitOptions.None);

					if (strLines.Length > 1)
					{
						sWriter.WriteLine($@"msgstr """"");
						foreach (string strLine in strLines)
						{
							if (strLine.Length >= 80)
							{
								string remLine = strLine;

								while (remLine.Length > 0)
								{
									string subLine = remLine.Substring(0, Math.Min(79, remLine.Length));
									remLine = remLine.Replace(subLine, "");

									string nChar = "";

									if (remLine.Length == 0)
									{
										nChar = "\\n";
									}

									sWriter.WriteLine($@"""{Normalize(subLine)}{nChar}""");
								}
							}
							else
							{
								sWriter.WriteLine($@"""{Normalize(strLine)}\n""");
							}
						}
					}
					else
					{
						sWriter.WriteLine($@"msgstr ""{Normalize(pString.Value)}""");
					}
				}
			}
		}

		private string Normalize(string value)
		{
			if (string.IsNullOrEmpty(value))
				return value;

			return value.Replace("\\'", "'").Replace("\\", "\\\\");
				//.Replace("\\G", "\\\\G")
				//.Replace("\\-", "\\\\-").Replace("\\L", "\\\\L").Replace("\\\\K", "\\K").Replace("\\\\K", "\\K");//.Replace(@"\""", @"""").Replace("\\", "\\\\");
		}
	}

	[DebuggerDisplay("{Id} - {Value}")]
	public class PoString
	{
		public string Id { get; set; }
		public string Value { get; set; }
		public List<string> Comments { get; private set; }
		public List<string> Links { get; set; }

		public bool IsHeader { get { return string.IsNullOrEmpty(this.Id); } }

		public PoString()
		{
			this.Comments = new List<string>();
			this.Links = new List<string>();
		}
	}
}
