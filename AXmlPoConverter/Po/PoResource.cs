using AXmlPoConverter.Po.Parsers;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace AXmlPoConverter.Po
{
	[DebuggerDisplay("{Language}")]
	public class PoResource : List<PoString>
	{
		public string Language { get; set; }
		public static PoResource ReadPoFile(string path)
		{
			string language = Path.GetFileNameWithoutExtension(path);
			ParserContext context = new ParserContext(new PoResource() { Language = language });

			IEnumerable<Type> parserTypes = Assembly.GetExecutingAssembly().GetTypes().Where(t => t.IsClass && t.Namespace == "AXmlPoConverter.Po.Parsers" && !t.IsAbstract);

			using (StreamReader reader = new StreamReader(path))
			{
				while (!reader.EndOfStream)
				{
					var line = reader.ReadLine();

					if (!string.IsNullOrEmpty(line) && !string.IsNullOrEmpty(line.Trim()))
					{
						line = line.Trim().Replace(@"\n", "");

						foreach (Type parserType in parserTypes)
						{
							if (parserType.IsNestedPrivate)
							{
								// Some autogenerated class (just skip it);
								continue;
							}

							ConstructorInfo cInfo = parserType.GetConstructor(new Type[] { typeof(string) });

							ParserBase parser = cInfo.Invoke(new object[] { line }) as ParserBase;

							if (parser.Parse(context))
							{
								break;
							}
						}
					}
					else
					{
						context.NextString();
					}
				}
			}

			context.FinalizeResource();

			return context.PoResource;
		}

		public string GetFileName()
		{
			return $"{this.Language}.po";
		}

		public void Save(string path)
		{
			string dirName = Path.GetDirectoryName(path);
			if (!Directory.Exists(dirName))
			{
				Directory.CreateDirectory(dirName);
			}
			using (StreamWriter sWriter = new StreamWriter(path))
			{
				// write header
				sWriter.WriteLine(@"# Generated By AXmlPoConverter");
				sWriter.WriteLine(@"msgid """"");
				sWriter.WriteLine(@"msgstr """"");
				sWriter.WritePoTextLine(@"Content-Type: text/plain; charset=UTF-8\n");
				sWriter.WritePoTextLine(@"Content-Transfer-Encoding: 8bit");
				sWriter.WritePoTextLine(@"Plural-Forms: nplurals=2; plural=(n != 1)\n");
				sWriter.WritePoTextLine($@"Language: {this.Language}\n");

				// write strings
				foreach (PoString pString in this)
				{
					sWriter.WriteLine();
					foreach (string comment in pString.Comments)
					{
						sWriter.WriteLine($@"# {comment.PoNormalize()}");
					}

					if (pString.IsPluralString)
					{
						sWriter.WriteLine($@"#. {Enum.GetName(typeof(QuantityType), pString.PluralType)}");
					}

					foreach (string link in pString.Links)
					{
						sWriter.WriteLine($@"#: {link.PoNormalize()}");
					}

					sWriter.WritePoTextLine(pString.Id, "msgid");
					sWriter.WritePoTextLine(pString.Value, "msgstr");
				}
			}
		}

	}

	[DebuggerDisplay("{Id} - {Value}")]
	public class PoString
	{
		public string Id { get; set; }
		public string Value { get; set; }
		public bool IsEmpty => string.IsNullOrWhiteSpace(this.Value);
		public List<string> Comments { get; private set; }
		public List<string> Links { get; set; }

		public bool IsPluralString => PluralType.HasValue;
		public QuantityType? PluralType { get; set; } = null;

		public bool IsHeader { get { return string.IsNullOrEmpty(this.Id); } }

		public PoString()
		{
			this.Comments = new List<string>();
			this.Links = new List<string>();
		}
	}
}
